package practice7_Q;

/*개인정답 작성자 : hwan
 * [7-23] 문제7-22에서 정의한 클래스들의 면적을 구하는 메서드를 작성하고 테스트 하시오.
 * 
 *  * 1. 메서드명 : sumArea
 * 기 능 : 주어진 배열에 담긴 도형들의 넓이를 모두 더해서 반환한다.
 * 반환타입 : double
 * 매개변수 : Shape[] arr
 * 
 * 
 * [실행결과]
 * 면적의 합:93.68140899333463
 * 
 * [7-24] 다음 중 인터페이스의 장점이 아닌 것은?
 * a. 표준화를 가능하게 해준다.
 * b. 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.
 * c. 독립적인 프로그래밍이 가능하다.
 * d. 다중상속을 가능하게 해준다.
 * e. 패키지간의 연결을 도와준다.
 * 
 * [정답] e
 * [해설] 인터페이스를 사용하는 이유와 그 장점을 정리해 보면 다음과 같다.
 * 1. 개발시간을 단축시킬 수 있다.
 * 일단 인터페이스가 작성되면, 이를 사용해서 프로그램을 작성하는 것이 가능하다. 메서드를 호출하는 쪽에서는 메서드의 내용에 관계없이 선언부만 알면 되기 때문이다.
 * 그리고 동시에 다른 한 쪽에서는 인터페이스를 구현하는 클래스를 작성하도록 하여, 인터페이스를구현하는 클래스가 작성될 때까지 기다리지 않고도 양쪽에서 동시에 개발을 진행할 수 있다.
 * 
 * 2. 표준화가 가능하다.
 * 프로젝트에 사용되는 기본 틀을 인터페이스로 작성한 다음, 개발자들에게 인터페이스를 구현하여 프로그램을 작성하도록 함으로써 보다 일관되고 정형화된 프로그램의 개발이 가능하다.
 * 
 * 3. 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.
 * 서로 상속관계에 있지도 않고, 같은 조상클래스를 가지고 있지 않은 서로 아무런 관계도 없는 클래스들에게 하나의 인터페이스를 공통적으로 구현하도록 함으로써 관계를 맺어 줄 수 있다.
 * 
 * 4. 독립적인 프로그래밍이 가능하다.
 * 인터페이스를 이용하면 클래스의 선언과 구현을 분리시킬 수 있기 때문에 실제구현에 독립적인 프로그램을 작성하는 것이 가능하다. 클래스와 클래스간의 직접적인 관계를 인터페이스를 이용해서 간접적인 관계로 변경하면, 한 클래스의 변경이 관련된 다른 클래스에 영향을 미치지 않는 독립적인 프로그래밍이 가능하다.
 *  
 */

public class Practice7_23_24 {
	/*
	(1) sumArea메서드를 작성하시오.
	*/
	public static double sumArea(Shape[] arr) {
		double sum=0.0;
		for(int i=0;i<arr.length;i++){
			sum+=arr[i].calcArea();
		}
		return sum;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Shape[] arr = {new Circle(5.0), new Rectangle(3,4), new Circle(1)};
		System.out.println("면적의 합:"+sumArea(arr));
	}

}
